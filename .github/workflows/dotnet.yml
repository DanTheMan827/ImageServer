# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches: '*'
  pull_request:
    branches: '*'

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # get pushed tag
    - name: Extract tag
      if: startsWith(github.ref, 'refs/tags/')
      id: tag
      run: |
        echo "TAG=${GITHUB_REF#refs/tags/}" >> ${GITHUB_OUTPUT}

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Build the app
    - name: Build the app
      run: |
        cd ImagePlayer
        dotnet publish -c ${{ matrix.configuration }} -o "../publish/${{ matrix.configuration }}" --self-contained=false

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.configuration }}
        path: publish/${{ matrix.configuration }}

    # Create a Zip File only for Release configuration
    - name: Create Zip File
      if: matrix.configuration == 'Release'
      run: |
        $zipPath = "ImagePlayer.zip"
        Compress-Archive -Path "publish/Release/*" -DestinationPath $zipPath

    # Delete "latest" tag
    - name: Delete "latest" tag
      if: matrix.configuration == 'Release' && github.ref == 'refs/heads/master'
      continue-on-error: true
      run: |
        git push -d origin latest

    # if we had a tag, we should make a release
    - name: Upload release artifacts
      if: matrix.configuration == 'Release' && github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v0.1.15
      with:
        body: 'This is an automatically generated pre-release based on the latest commit to the master branch'
        tag_name: 'latest'
        draft: false
        prerelease: true
        generate_release_notes: true
        files: |
          ./ImagePlayer.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # if we had a tag, we should make a release
    - name: Upload release artifacts
      if: startsWith(github.ref, 'refs/tags/') && matrix.configuration == 'Release'
      uses: softprops/action-gh-release@v0.1.15
      with:
        tag_name: ${{ github.event.inputs.tag }}
        draft: true
        generate_release_notes: true
        files: |
          ./ImagePlayer.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
